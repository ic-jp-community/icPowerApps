<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>